import React, { useState, useEffect } from 'react';
import { usePipelineContext } from '../../../contexts/PipelineContext';
import { usePipeline } from '../../../hooks/usePipeline';
import LoadingSpinner from '../../common/LoadingSpinner';

const Step5Visualization = () => {
  const { wizardData, updateWizardData, setError, clearError } = usePipelineContext();
  const { currentPipeline, loading, error, generatePipeline } = usePipeline();
  
  const [pipelineGenerated, setPipelineGenerated] = useState(false);

  useEffect(() => {
    if (wizardData.pipeline) {
      setPipelineGenerated(true);
    }
  }, [wizardData.pipeline]);

  const handleGeneratePipeline = async () => {
    if (!wizardData.source || !wizardData.target || !wizardData.etlConfig) {
      setError('pipeline', '–ù–µ –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      return;
    }

    clearError('pipeline');
    
    const pipelineData = {
      source: wizardData.source,
      target: wizardData.target,
      etlConfig: wizardData.etlConfig,
      analysis: wizardData.analysis,
    };

    const result = await generatePipeline(pipelineData);
    if (result) {
      setPipelineGenerated(true);
      updateWizardData({ pipeline: result });
    }
  };

  const containerStyle = {
    maxWidth: '800px',
    margin: '0 auto',
  };

  const sectionStyle = {
    marginBottom: '30px',
  };

  const titleStyle = {
    fontSize: '20px',
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: '16px',
  };

  const buttonStyle = {
    padding: '12px 24px',
    backgroundColor: '#3498db',
    color: 'white',
    border: 'none',
    borderRadius: '8px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    marginBottom: '20px',
  };

  const pipelineStyle = {
    padding: '20px',
    backgroundColor: '#f8f9fa',
    borderRadius: '12px',
    border: '1px solid #e0e0e0',
  };

  const nodeStyle = (type) => ({
    padding: '12px 16px',
    borderRadius: '8px',
    margin: '8px 0',
    textAlign: 'center',
    fontWeight: 'bold',
    color: 'white',
    backgroundColor: type === 'source' ? '#27ae60' : type === 'target' ? '#e74c3c' : '#3498db',
  });

  const arrowStyle = {
    textAlign: 'center',
    fontSize: '24px',
    color: '#7f8c8d',
    margin: '8px 0',
  };

  const infoStyle = {
    padding: '12px',
    backgroundColor: '#e8f4fd',
    borderRadius: '8px',
    marginBottom: '16px',
    fontSize: '14px',
  };

  const errorStyle = {
    color: '#e74c3c',
    fontSize: '14px',
    marginTop: '8px',
  };

  const renderPipelineVisualization = () => {
    if (!currentPipeline) return null;

    return (
      <div style={pipelineStyle}>
        <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '16px' }}>
          üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        </h3>
        
        {/* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö */}
        <div style={nodeStyle('source')}>
          üìÅ {wizardData.source?.type === 'file' ? '–§–∞–π–ª' : wizardData.source?.type}
          <br />
          <small style={{ fontSize: '12px', opacity: 0.8 }}>
            {wizardData.source?.file?.name || '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö'}
          </small>
        </div>

        <div style={arrowStyle}>‚¨áÔ∏è</div>

        {/* –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
        {wizardData.etlConfig?.transformations?.map((transformation, index) => (
          <div key={index}>
            <div style={nodeStyle('transform')}>
              üîÑ {transformation.name || `–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è ${index + 1}`}
              <br />
              <small style={{ fontSize: '12px', opacity: 0.8 }}>
                {transformation.type}
              </small>
            </div>
            <div style={arrowStyle}>‚¨áÔ∏è</div>
          </div>
        ))}

        {/* –¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ */}
        <div style={nodeStyle('target')}>
          üéØ {wizardData.target?.system?.toUpperCase() || '–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞'}
          <br />
          <small style={{ fontSize: '12px', opacity: 0.8 }}>
            {wizardData.target?.config?.database || wizardData.target?.config?.path || '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ'}
          </small>
        </div>

        <div style={infoStyle}>
          <strong>ID –ø–∞–π–ø–ª–∞–π–Ω–∞:</strong> {currentPipeline.id || '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...'}
          <br />
          <strong>–°—Ç–∞—Ç—É—Å:</strong> {currentPipeline.status || '–°–æ–∑–¥–∞–Ω'}
          <br />
          <strong>–°–æ–∑–¥–∞–Ω:</strong> {new Date().toLocaleString()}
        </div>
      </div>
    );
  };

  return (
    <div style={containerStyle}>
      <div style={sectionStyle}>
        <h2 style={titleStyle}>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞</h2>
        
        <p style={{ color: '#7f8c8d', marginBottom: '20px' }}>
          –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ ETL-–ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.
        </p>

        {!pipelineGenerated && (
          <div>
            <button
              style={buttonStyle}
              onClick={handleGeneratePipeline}
              disabled={loading || !wizardData.source || !wizardData.target || !wizardData.etlConfig}
            >
              üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω
            </button>
            
            {(!wizardData.source || !wizardData.target || !wizardData.etlConfig) && (
              <div style={infoStyle}>
                ‚ö†Ô∏è –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏:
                <ul style={{ marginTop: '8px', paddingLeft: '20px' }}>
                  {!wizardData.source && <li>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</li>}
                  {!wizardData.target && <li>–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</li>}
                  {!wizardData.etlConfig && <li>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ETL</li>}
                </ul>
              </div>
            )}
          </div>
        )}

        {pipelineGenerated && renderPipelineVisualization()}

        {loading && <LoadingSpinner message="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞..." />}
        {error && <div style={errorStyle}>{error}</div>}
      </div>
    </div>
  );
};

export default Step5Visualization;
