import React, { useState } from 'react';
import { usePipelineContext } from '../../../contexts/PipelineContext';
import { useFileUpload } from '../../../hooks/useFileUpload';
import FileDropzone from '../../common/FileDropzone';
import FileTypeSelector from '../../common/FileTypeSelector';
import LoadingSpinner from '../../common/LoadingSpinner';

const Step1DataSource = () => {
  const { wizardData, updateWizardData, setError, clearError } = usePipelineContext();
  const { selectedFile, storagePath, loading, error, handleFileChange, uploadFile, getFileId } = useFileUpload();
  
  const [dataSourceType, setDataSourceType] = useState(wizardData.source?.type || 'file');
  const [fileType, setFileType] = useState(wizardData.source?.fileType || 'csv');

  const handleDataSourceTypeChange = (type) => {
    setDataSourceType(type);
    clearError('source');
    updateWizardData({
      source: {
        type,
        fileType: type === 'file' ? fileType : null,
        file: type === 'file' ? selectedFile : null,
        storagePath: type === 'file' ? storagePath : null,
      }
    });
  };

  const handleFileTypeChange = (type) => {
    setFileType(type);
    clearError('source');
    updateWizardData({
      source: {
        type: dataSourceType,
        fileType: type,
        file: selectedFile,
        storagePath,
      }
    });
  };

  const handleFileSelect = (file) => {
    handleFileChange(file);
    clearError('source');
    updateWizardData({
      source: {
        type: dataSourceType,
        fileType,
        file,
        storagePath,
      }
    });
  };

  const handleUpload = async () => {
    const result = await uploadFile();
    if (result) {
      updateWizardData({
        source: {
          type: dataSourceType,
          fileType,
          file: selectedFile,
          storagePath: result.storage_path,
        }
      });
    }
  };

  const containerStyle = {
    maxWidth: '800px',
    margin: '0 auto',
  };

  const sectionStyle = {
    marginBottom: '30px',
  };

  const titleStyle = {
    fontSize: '20px',
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: '16px',
  };

  const optionStyle = (isSelected) => ({
    padding: '16px',
    border: `2px solid ${isSelected ? '#3498db' : '#e0e0e0'}`,
    borderRadius: '8px',
    cursor: 'pointer',
    backgroundColor: isSelected ? '#f0f8ff' : '#ffffff',
    marginBottom: '12px',
    transition: 'all 0.3s ease',
  });

  const optionTitleStyle = {
    fontSize: '16px',
    fontWeight: 'bold',
    marginBottom: '4px',
    color: '#2c3e50',
  };

  const optionDescriptionStyle = {
    fontSize: '14px',
    color: '#7f8c8d',
  };

  const buttonStyle = {
    padding: '12px 24px',
    backgroundColor: '#3498db',
    color: 'white',
    border: 'none',
    borderRadius: '8px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    marginTop: '16px',
  };

  const fileInfoStyle = {
    padding: '12px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px',
    marginTop: '16px',
  };

  const errorStyle = {
    color: '#e74c3c',
    fontSize: '14px',
    marginTop: '8px',
  };

  return (
    <div style={containerStyle}>
      <div style={sectionStyle}>
        <h2 style={titleStyle}>–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</h2>
        
        <div style={optionStyle(dataSourceType === 'file')} onClick={() => handleDataSourceTypeChange('file')}>
          <div style={optionTitleStyle}>üìÅ –§–∞–π–ª</div>
          <div style={optionDescriptionStyle}>
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV, JSON, XML)
          </div>
        </div>

        <div style={optionStyle(dataSourceType === 'database')} onClick={() => handleDataSourceTypeChange('database')}>
          <div style={optionTitleStyle}>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</div>
          <div style={optionDescriptionStyle}>
            –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          </div>
        </div>

        <div style={optionStyle(dataSourceType === 'stream')} onClick={() => handleDataSourceTypeChange('stream')}>
          <div style={optionTitleStyle}>üåä –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö</div>
          <div style={optionDescriptionStyle}>
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          </div>
        </div>
      </div>

      {dataSourceType === 'file' && (
        <>
          <div style={sectionStyle}>
            <h3 style={titleStyle}>–¢–∏–ø —Ñ–∞–π–ª–∞</h3>
            <FileTypeSelector
              selectedType={fileType}
              onTypeSelect={handleFileTypeChange}
            />
          </div>

          <div style={sectionStyle}>
            <h3 style={titleStyle}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h3>
            <FileDropzone
              onFileSelect={handleFileSelect}
              acceptedTypes={['.csv', '.json', '.xml']}
            />
            
            {selectedFile && (
              <div style={fileInfoStyle}>
                <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> {selectedFile.name}
                <br />
                <strong>–†–∞–∑–º–µ—Ä:</strong> {(selectedFile.size / 1024).toFixed(2)} KB
                <br />
                <strong>–¢–∏–ø:</strong> {selectedFile.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </div>
            )}

            {selectedFile && !storagePath && (
              <button
                style={buttonStyle}
                onClick={handleUpload}
                disabled={loading}
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'}
              </button>
            )}

            {storagePath && (
              <div style={fileInfoStyle}>
                ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                <br />
                <strong>–ü—É—Ç—å:</strong> {storagePath}
              </div>
            )}
          </div>
        </>
      )}

      {dataSourceType === 'database' && (
        <div style={sectionStyle}>
          <h3 style={titleStyle}>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h3>
          <p style={{ color: '#7f8c8d' }}>
            –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
          </p>
        </div>
      )}

      {dataSourceType === 'stream' && (
        <div style={sectionStyle}>
          <h3 style={titleStyle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
          <p style={{ color: '#7f8c8d' }}>
            –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
          </p>
        </div>
      )}

      {loading && <LoadingSpinner message="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..." />}
      {error && <div style={errorStyle}>{error}</div>}
    </div>
  );
};

export default Step1DataSource;
